<?xml version="1.0" encoding="UTF-8"?><record_update table="sc_cat_item_producer">
    <sc_cat_item_producer action="DELETE">
        <active>true</active>
        <availability>on_desktop</availability>
        <billable>false</billable>
        <can_cancel>false</can_cancel>
        <category/>
        <cost>0</cost>
        <custom_cart/>
        <delivery_plan display_value="DEFAULT">523da512c611228900811a37c97c2014</delivery_plan>
        <delivery_plan_script/>
        <delivery_time>1970-01-03 00:00:00</delivery_time>
        <description/>
        <display_price_property>non_zero</display_price_property>
        <entitlement_script/>
        <flow_designer_flow/>
        <group/>
        <hide_sp>false</hide_sp>
        <icon/>
        <ignore_price>false</ignore_price>
        <image/>
        <list_price>0</list_price>
        <location/>
        <mandatory_attachment>false</mandatory_attachment>
        <meta/>
        <mobile_hide_price>false</mobile_hide_price>
        <mobile_picture/>
        <mobile_picture_type>use_desktop_picture</mobile_picture_type>
        <model/>
        <name>cuong experiment Firewall Request</name>
        <no_attachment_v2>false</no_attachment_v2>
        <no_cart>false</no_cart>
        <no_cart_v2>false</no_cart_v2>
        <no_delivery_time_v2>false</no_delivery_time_v2>
        <no_order>false</no_order>
        <no_order_now>false</no_order_now>
        <no_proceed_checkout>false</no_proceed_checkout>
        <no_quantity>false</no_quantity>
        <no_quantity_v2>false</no_quantity_v2>
        <no_search>false</no_search>
        <no_wishlist_v2>false</no_wishlist_v2>
        <omit_price>false</omit_price>
        <order>0</order>
        <ordered_item_link/>
        <picture/>
        <post_insert_script/>
        <preview>JavaScript: popupOpenStandard("com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id=58637d35071b1810c11df2218c1ed0e8&amp;sysparm_preview=true", "summary");</preview>
        <price>0</price>
        <recurring_frequency/>
        <recurring_price>0</recurring_price>
        <redirect_url>generated_record</redirect_url>
        <request_method/>
        <roles/>
        <sc_catalogs/>
        <sc_ic_item_staging/>
        <sc_ic_version/>
        <script><![CDATA[producer.portal_redirect ="domino";

if(producer.being_cloned == "true") {
	gs.info("Need to clone the record");
}
else {
	gs.info("No need to clone");
}
var li = RP.getWindowProperties();
for (l in li) {
	gs.info("item:" + l);
}

var rowsRule = producer.domino_firewall_rules_list.getRowCount();

for (var i = 0; i < rowsRule; i++) {

	var grFirewallRule = new GlideRecord('x_513186_domino_ap_firewall_rules');
	grFirewallRule.initialize();

	grFirewallRule.setValue('firewall_req_id', current.getUniqueValue());
	grFirewallRule.setValue('source_server_name', producer.domino_firewall_rules_list.getRow(i).source_server_name);
	grFirewallRule.setValue('source_ip_address', producer.domino_firewall_rules_list.getRow(i).source_ip_address);
	grFirewallRule.setValue('source_mask', producer.domino_firewall_rules_list.getRow(i).source_ip_mask);
	grFirewallRule.setValue('dest_server_name', producer.domino_firewall_rules_list.getRow(i).dest_server_name);
	grFirewallRule.setValue('dest_ip_address', producer.domino_firewall_rules_list.getRow(i).dest_ip_address);
	grFirewallRule.setValue('dest_mask', producer.domino_firewall_rules_list.getRow(i).dest_ip_mask);
	grFirewallRule.setValue('nese_service_name',  producer.domino_firewall_rules_list.getRow(i).nese_service_name);
	grFirewallRule.setValue('port_number', producer.domino_firewall_rules_list.getRow(i).port_number);
	grFirewallRule.setValue('protocol', producer.domino_firewall_rules_list.getRow(i).protocol);

	// In case user is cloning the firewall request, we also need to clone source server network group, 
	// dest server network group, dest port group and all the underlying tables
	var src_group = producer.domino_firewall_rules_list.getRow(i).source_server_network_group;
	var dst_group = producer.domino_firewall_rules_list.getRow(i).dest_server_network_group;
	var port_group = producer.domino_firewall_rules_list.getRow(i).dest_ports_group;
	if(producer.being_cloned == "true") {
		src_group = cloneServerNetworkGroup(src_group);
		dst_group = cloneServerNetworkGroup(dst_group);
		port_group = clonePortGroup(port_group);
	}
	grFirewallRule.setValue('source_server_network_group', src_group);
	grFirewallRule.setValue('dest_server_network_group', dst_group);
	grFirewallRule.setValue('dest_ports_group', port_group);
	// end of cloning

	grFirewallRule.insert();
}

function cloneServerNetworkGroup(sys_id) {
	if(!sys_id) {
		return null;
	}
	var gr = new GlideRecord('x_513186_domino_ap_fw_server_network_groups');
	gr.get(sys_id);
	if(!gr){
		return null;
	}
	var result = new GlideRecord('x_513186_domino_ap_fw_server_network_groups');
	result.initialize();
	result.server_network_group_name = gr.server_network_group_name + " cloned";
	result.server_network_group_owner = gr.server_network_group_owner;
	result.insert();
	
	// Now cloning the server network list
	var src_list = new GlideRecord('x_513186_domino_ap_fw_server_network_lists');
	src_list.addQuery('server_network_group_ref', gr.sys_id);
	src_list.query();
	while(src_list.next()) {
		var dst_list = new GlideRecord('x_513186_domino_ap_fw_server_network_lists');
		dst_list.initialize();
		dst_list.server_network_group_ref = result.sys_id;
		dst_list.ip_address = src_list.ip_address;
		dst_list.mask = src_list.mask;
		dst_list.server_name = src_list.server_name;
		dst_list.insert();
	}
	return result.sys_id;
}
function clonePortGroup(sys_id) {
	if(!sys_id) {
		return null;
	}
	var gr = new GlideRecord('x_513186_domino_ap_fw_ports_group');
	gr.get(sys_id);
	if(!gr){
		return null;
	}
	var result = new GlideRecord('x_513186_domino_ap_fw_ports_group');
	result.initialize();
	result.port_group_name = gr.port_group_name + " cloned";
	result.port_group_owner = gr.port_group_owner;
	result.insert();
	
	// Now cloning the port list
	var src_list = new GlideRecord('x_513186_domino_ap_fw_ports_list');
	src_list.addQuery('ports_group_ref', gr.sys_id);
	src_list.query();
	while(src_list.next()) {
		var dst_list = new GlideRecord('x_513186_domino_ap_fw_ports_list');
		dst_list.initialize();
		dst_list.ports_group_ref = result.sys_id;
		dst_list.port = src_list.port;
		dst_list.port_protocol = src_list.port_protocol;
		dst_list.insert();
	}
	return result.sys_id;	
}

]]></script>
        <short_description>Copy of Firewall  Request</short_description>
        <show_variable_help_on_load>false</show_variable_help_on_load>
        <start_closed>false</start_closed>
        <sys_class_name>sc_cat_item_producer</sys_class_name>
        <sys_created_by>cuong</sys_created_by>
        <sys_created_on>2020-09-17 15:27:08</sys_created_on>
        <sys_id>58637d35071b1810c11df2218c1ed0e8</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>cuong experiment Firewall Request</sys_name>
        <sys_package display_value="Domino App" source="x_513186_domino_ap">21e2d540070b5010c11df2218c1ed04b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Domino App">21e2d540070b5010c11df2218c1ed04b</sys_scope>
        <sys_update_name>sc_cat_item_producer_58637d35071b1810c11df2218c1ed0e8</sys_update_name>
        <sys_updated_by>cuong</sys_updated_by>
        <sys_updated_on>2020-09-17 17:51:44</sys_updated_on>
        <table_name>x_513186_domino_ap_firewall</table_name>
        <template/>
        <type>item</type>
        <use_sc_layout>true</use_sc_layout>
        <vendor/>
        <view/>
        <visible_bundle>true</visible_bundle>
        <visible_guide>true</visible_guide>
        <visible_standalone>true</visible_standalone>
        <workflow/>
    </sc_cat_item_producer>
    <sys_translated_text action="DELETE" query="documentkey=58637d35071b1810c11df2218c1ed0e8"/>
    <fx_price action="DELETE" query="id=58637d35071b1810c11df2218c1ed0e8"/>
    <fx_price action="DELETE">
        <amount>0</amount>
        <currency display_value="USD">USD</currency>
        <field>price</field>
        <id>58637d35071b1810c11df2218c1ed0e8</id>
        <parent/>
        <reference_amount>0</reference_amount>
        <reference_currency display_value="USD">USD</reference_currency>
        <sys_created_by>cuong</sys_created_by>
        <sys_created_on>2020-09-17 15:27:08</sys_created_on>
        <sys_id>1c637d35071b1810c11df2218c1ed0ed</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>cuong</sys_updated_by>
        <sys_updated_on>2020-09-17 15:27:12</sys_updated_on>
        <table>sc_cat_item_producer</table>
        <type>calculated</type>
    </fx_price>
    <fx_price action="DELETE">
        <amount>0</amount>
        <currency display_value="USD">USD</currency>
        <field>recurring_price</field>
        <id>58637d35071b1810c11df2218c1ed0e8</id>
        <parent/>
        <reference_amount>0</reference_amount>
        <reference_currency display_value="USD">USD</reference_currency>
        <sys_created_by>cuong</sys_created_by>
        <sys_created_on>2020-09-17 15:27:08</sys_created_on>
        <sys_id>dc637d35071b1810c11df2218c1ed0ee</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>cuong</sys_updated_by>
        <sys_updated_on>2020-09-17 15:27:12</sys_updated_on>
        <table>sc_cat_item_producer</table>
        <type>calculated</type>
    </fx_price>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Domino App">21e2d540070b5010c11df2218c1ed04b</application>
        <file_path/>
        <instance_id>b4a6de96db7054904b5c50b6f496193e</instance_id>
        <instance_name>dev104053</instance_name>
        <name>sc_cat_item_producer_58637d35071b1810c11df2218c1ed0e8</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sc_cat_item_producer"&gt;&lt;sc_cat_item_producer action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;availability&gt;on_desktop&lt;/availability&gt;&lt;billable&gt;false&lt;/billable&gt;&lt;can_cancel&gt;false&lt;/can_cancel&gt;&lt;category/&gt;&lt;cost&gt;0&lt;/cost&gt;&lt;custom_cart/&gt;&lt;delivery_plan display_value="DEFAULT"&gt;523da512c611228900811a37c97c2014&lt;/delivery_plan&gt;&lt;delivery_plan_script/&gt;&lt;delivery_time&gt;1970-01-03 00:00:00&lt;/delivery_time&gt;&lt;description/&gt;&lt;display_price_property&gt;non_zero&lt;/display_price_property&gt;&lt;entitlement_script/&gt;&lt;flow_designer_flow/&gt;&lt;group/&gt;&lt;hide_sp&gt;false&lt;/hide_sp&gt;&lt;icon/&gt;&lt;ignore_price&gt;false&lt;/ignore_price&gt;&lt;image/&gt;&lt;list_price&gt;0&lt;/list_price&gt;&lt;location/&gt;&lt;mandatory_attachment&gt;false&lt;/mandatory_attachment&gt;&lt;meta/&gt;&lt;mobile_hide_price&gt;false&lt;/mobile_hide_price&gt;&lt;mobile_picture/&gt;&lt;mobile_picture_type&gt;use_desktop_picture&lt;/mobile_picture_type&gt;&lt;model/&gt;&lt;name&gt;cuong experiment Firewall Request&lt;/name&gt;&lt;no_attachment_v2&gt;false&lt;/no_attachment_v2&gt;&lt;no_cart&gt;false&lt;/no_cart&gt;&lt;no_cart_v2&gt;false&lt;/no_cart_v2&gt;&lt;no_delivery_time_v2&gt;false&lt;/no_delivery_time_v2&gt;&lt;no_order&gt;false&lt;/no_order&gt;&lt;no_order_now&gt;false&lt;/no_order_now&gt;&lt;no_proceed_checkout&gt;false&lt;/no_proceed_checkout&gt;&lt;no_quantity&gt;false&lt;/no_quantity&gt;&lt;no_quantity_v2&gt;false&lt;/no_quantity_v2&gt;&lt;no_search&gt;false&lt;/no_search&gt;&lt;no_wishlist_v2&gt;false&lt;/no_wishlist_v2&gt;&lt;omit_price&gt;false&lt;/omit_price&gt;&lt;order&gt;0&lt;/order&gt;&lt;ordered_item_link/&gt;&lt;picture/&gt;&lt;post_insert_script/&gt;&lt;preview&gt;JavaScript: popupOpenStandard("com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;amp;sysparm_id=58637d35071b1810c11df2218c1ed0e8&amp;amp;sysparm_preview=true", "summary");&lt;/preview&gt;&lt;price&gt;0&lt;/price&gt;&lt;recurring_frequency/&gt;&lt;recurring_price&gt;0&lt;/recurring_price&gt;&lt;redirect_url&gt;generated_record&lt;/redirect_url&gt;&lt;request_method/&gt;&lt;roles/&gt;&lt;sc_catalogs/&gt;&lt;sc_ic_item_staging/&gt;&lt;sc_ic_version/&gt;&lt;script&gt;&lt;![CDATA[producer.portal_redirect ="domino";

if(producer.being_cloned == "true") {
	gs.info("Need to clone the record");
}
else {
	gs.info("No need to clone");
}
var li = RP.getWindowProperties();
for (l in li) {
	gs.info("item:" + l);
}

var rowsRule = producer.domino_firewall_rules_list.getRowCount();

for (var i = 0; i &lt; rowsRule; i++) {

	var grFirewallRule = new GlideRecord('x_513186_domino_ap_firewall_rules');
	grFirewallRule.initialize();

	grFirewallRule.setValue('firewall_req_id', current.getUniqueValue());
	grFirewallRule.setValue('source_server_name', producer.domino_firewall_rules_list.getRow(i).source_server_name);
	grFirewallRule.setValue('source_ip_address', producer.domino_firewall_rules_list.getRow(i).source_ip_address);
	grFirewallRule.setValue('source_mask', producer.domino_firewall_rules_list.getRow(i).source_ip_mask);
	grFirewallRule.setValue('dest_server_name', producer.domino_firewall_rules_list.getRow(i).dest_server_name);
	grFirewallRule.setValue('dest_ip_address', producer.domino_firewall_rules_list.getRow(i).dest_ip_address);
	grFirewallRule.setValue('dest_mask', producer.domino_firewall_rules_list.getRow(i).dest_ip_mask);
	grFirewallRule.setValue('nese_service_name',  producer.domino_firewall_rules_list.getRow(i).nese_service_name);
	grFirewallRule.setValue('port_number', producer.domino_firewall_rules_list.getRow(i).port_number);
	grFirewallRule.setValue('protocol', producer.domino_firewall_rules_list.getRow(i).protocol);

	// In case user is cloning the firewall request, we also need to clone source server network group, 
	// dest server network group, dest port group and all the underlying tables
	var src_group = producer.domino_firewall_rules_list.getRow(i).source_server_network_group;
	var dst_group = producer.domino_firewall_rules_list.getRow(i).dest_server_network_group;
	var port_group = producer.domino_firewall_rules_list.getRow(i).dest_ports_group;
	if(producer.being_cloned == "true") {
		src_group = cloneServerNetworkGroup(src_group);
		dst_group = cloneServerNetworkGroup(dst_group);
		port_group = clonePortGroup(port_group);
	}
	grFirewallRule.setValue('source_server_network_group', src_group);
	grFirewallRule.setValue('dest_server_network_group', dst_group);
	grFirewallRule.setValue('dest_ports_group', port_group);
	// end of cloning

	grFirewallRule.insert();
}

function cloneServerNetworkGroup(sys_id) {
	if(!sys_id) {
		return null;
	}
	var gr = new GlideRecord('x_513186_domino_ap_fw_server_network_groups');
	gr.get(sys_id);
	if(!gr){
		return null;
	}
	var result = new GlideRecord('x_513186_domino_ap_fw_server_network_groups');
	result.initialize();
	result.server_network_group_name = gr.server_network_group_name + " cloned";
	result.server_network_group_owner = gr.server_network_group_owner;
	result.insert();
	
	// Now cloning the server network list
	var src_list = new GlideRecord('x_513186_domino_ap_fw_server_network_lists');
	src_list.addQuery('server_network_group_ref', gr.sys_id);
	src_list.query();
	while(src_list.next()) {
		var dst_list = new GlideRecord('x_513186_domino_ap_fw_server_network_lists');
		dst_list.initialize();
		dst_list.server_network_group_ref = result.sys_id;
		dst_list.ip_address = src_list.ip_address;
		dst_list.mask = src_list.mask;
		dst_list.server_name = src_list.server_name;
		dst_list.insert();
	}
	return result.sys_id;
}
function clonePortGroup(sys_id) {
	if(!sys_id) {
		return null;
	}
	var gr = new GlideRecord('x_513186_domino_ap_fw_ports_group');
	gr.get(sys_id);
	if(!gr){
		return null;
	}
	var result = new GlideRecord('x_513186_domino_ap_fw_ports_group');
	result.initialize();
	result.port_group_name = gr.port_group_name + " cloned";
	result.port_group_owner = gr.port_group_owner;
	result.insert();
	
	// Now cloning the port list
	var src_list = new GlideRecord('x_513186_domino_ap_fw_ports_list');
	src_list.addQuery('ports_group_ref', gr.sys_id);
	src_list.query();
	while(src_list.next()) {
		var dst_list = new GlideRecord('x_513186_domino_ap_fw_ports_list');
		dst_list.initialize();
		dst_list.ports_group_ref = result.sys_id;
		dst_list.port = src_list.port;
		dst_list.port_protocol = src_list.port_protocol;
		dst_list.insert();
	}
	return result.sys_id;	
}

]]&gt;&lt;/script&gt;&lt;short_description&gt;Copy of Firewall  Request&lt;/short_description&gt;&lt;show_variable_help_on_load&gt;false&lt;/show_variable_help_on_load&gt;&lt;start_closed&gt;false&lt;/start_closed&gt;&lt;sys_class_name&gt;sc_cat_item_producer&lt;/sys_class_name&gt;&lt;sys_created_by&gt;cuong&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-09-17 15:27:08&lt;/sys_created_on&gt;&lt;sys_id&gt;58637d35071b1810c11df2218c1ed0e8&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;cuong experiment Firewall Request&lt;/sys_name&gt;&lt;sys_package display_value="Domino App" source="x_513186_domino_ap"&gt;21e2d540070b5010c11df2218c1ed04b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Domino App"&gt;21e2d540070b5010c11df2218c1ed04b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sc_cat_item_producer_58637d35071b1810c11df2218c1ed0e8&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;cuong&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-09-17 17:51:44&lt;/sys_updated_on&gt;&lt;table_name&gt;x_513186_domino_ap_firewall&lt;/table_name&gt;&lt;template/&gt;&lt;type&gt;item&lt;/type&gt;&lt;use_sc_layout&gt;true&lt;/use_sc_layout&gt;&lt;vendor/&gt;&lt;view/&gt;&lt;visible_bundle&gt;true&lt;/visible_bundle&gt;&lt;visible_guide&gt;true&lt;/visible_guide&gt;&lt;visible_standalone&gt;true&lt;/visible_standalone&gt;&lt;workflow/&gt;&lt;/sc_cat_item_producer&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=58637d35071b1810c11df2218c1ed0e8"/&gt;&lt;fx_price action="delete_multiple" query="id=58637d35071b1810c11df2218c1ed0e8"/&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;price&lt;/field&gt;&lt;id&gt;58637d35071b1810c11df2218c1ed0e8&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;cuong&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-09-17 15:27:08&lt;/sys_created_on&gt;&lt;sys_id&gt;1c637d35071b1810c11df2218c1ed0ed&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;cuong&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-09-17 15:27:12&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item_producer&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;recurring_price&lt;/field&gt;&lt;id&gt;58637d35071b1810c11df2218c1ed0e8&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;cuong&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-09-17 15:27:08&lt;/sys_created_on&gt;&lt;sys_id&gt;dc637d35071b1810c11df2218c1ed0ee&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;cuong&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-09-17 15:27:12&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item_producer&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;/record_update&gt;</payload>
        <payload_hash>423469719</payload_hash>
        <record_name>cuong experiment Firewall Request</record_name>
        <reverted_from/>
        <source>3712dc8a07439410c11df2218c1ed02c</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>cuong</sys_created_by>
        <sys_created_on>2020-09-17 17:51:44</sys_created_on>
        <sys_id>a674da79075b1810c11df2218c1ed02a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1749d318d960000001</sys_recorded_at>
        <sys_updated_by>cuong</sys_updated_by>
        <sys_updated_on>2020-09-17 17:51:44</sys_updated_on>
        <type>Record Producer</type>
        <update_guid>ae74da79655b1810ade28076ad787229</update_guid>
        <update_guid_history>ae74da79655b1810ade28076ad787229:423469719,7a7339f1f11b181057cbf7ff35945fc0:1269194975,1063fd352e1b18109bb5d12dca8bbd17:485483335</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="cuong experiment Firewall Request">0f74da79075b1810c11df2218c1ed083</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>cuong</sys_created_by>
        <sys_created_on>2020-09-17 17:51:46</sys_created_on>
        <sys_db_object display_value="" name="sc_cat_item_producer">sc_cat_item_producer</sys_db_object>
        <sys_id>02cf850b18be49c0850622408d154a40</sys_id>
        <sys_metadata>58637d35071b1810c11df2218c1ed0e8</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>cuong experiment Firewall Request</sys_name>
        <sys_package display_value="Domino App" source="x_513186_domino_ap">21e2d540070b5010c11df2218c1ed04b</sys_package>
        <sys_parent display_value="Firewall Requests">35c35d44070b5010c11df2218c1ed04b</sys_parent>
        <sys_policy/>
        <sys_scope display_value="Domino App">21e2d540070b5010c11df2218c1ed04b</sys_scope>
        <sys_scope_delete display_value="">534871dd57fc4727a77d1cc641633e59</sys_scope_delete>
        <sys_update_name>sc_cat_item_producer_58637d35071b1810c11df2218c1ed0e8</sys_update_name>
        <sys_update_version display_value="sc_cat_item_producer_58637d35071b1810c11df2218c1ed0e8">a674da79075b1810c11df2218c1ed02a</sys_update_version>
        <sys_updated_by>cuong</sys_updated_by>
        <sys_updated_on>2020-09-17 17:51:46</sys_updated_on>
    </sys_metadata_delete>
</record_update>
